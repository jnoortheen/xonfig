import asyncio
import uvloop

# the output gets cut -- example 'ls' -- but it doesn't feel sluggish like that of with default ptk
asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

import io
import sys

# disable buffering outputs
sys.stdout = io.TextIOWrapper(open(sys.stdout.fileno(), "wb", 0), write_through=True)
sys.stderr = io.TextIOWrapper(open(sys.stderr.fileno(), "wb", 0), write_through=True)


def _init_conda_env():
    import os

    if os.path.exists("/opt/homebrew/Caskroom/miniconda/base/bin/conda"):
        import sys as _sys
        import subprocess as sp
        from types import ModuleType as _ModuleType

        _mod = _ModuleType(
            "xontrib.conda",
            "Autogenerated from $(/opt/homebrew/Caskroom/miniconda/base/bin/conda shell.xonsh hook)",
        )
        __xonsh__.execer.exec(
            sp.check_output(
                "/opt/homebrew/Caskroom/miniconda/base/bin/conda", "shell.xonsh", "hook"
            ),
            glbs=_mod.__dict__,
            filename="/opt/homebrew/Caskroom/miniconda/base/bin/conda",
        )
        _sys.modules["xontrib.conda"] = _mod
        del _sys, _mod, _ModuleType


def _load():
    # put this in a function so that namespace is not polluted
    from pathlib import Path
    from xonsh.xontribs import xontribs_load

    xontribs_load(
        [
            "abbrevs",
            # venv
            "vox",
            # "avox_poetry",
            # --- completions --- #
            "argcomplete",
            "jedi",
            # --- prompt --- #
            "cmd_done",
            # cli integration
            "broot",
            "fzf_widgets",
            # theme
            "powerline3",
            # keybindings
            "hist_navigator",
            # misc
            # "back2dir",
            # "commands",
            "fish_completer",
            "django",
        ],
        # verbose=True,
    )
    from user_xsh.config_loader import Loader

    if "pytest" in str(sys.argv):
        raise Exception(" do not call rc")

    XSH_ROOT_PATH = Path(__file__).parent

    Loader(
        XSH_ROOT_PATH / "configs",
        modules=(
            "user_xsh.xaliases.docker",
            "user_xsh.xaliases.cleanup",
            "user_xsh.xaliases.misc",
            "user_xsh.key_bindings.bindings",
            "user_xsh.tb_hooks.hook_better_exceptions",
            # "user_xsh.history.completer",
        ),
    ).normal()

    # updates Prompt variable
    xontribs_load(["term_integration"])


_load()
del _load

# usable objects to the console
from pipe import *  # noqa - import pipe enabled functions
from lambdax import X  # noqa
